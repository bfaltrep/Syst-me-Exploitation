#ifdef CHANGED

#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
#include "synch.h"

static Semaphore * readAvail;
static Semaphore * writeDone;
static Semaphore * write ;
static Semaphore * sas;
static Lock * mutex;
static int nblecteur;

static void ReadAvailHandler(void * arg) {
  (void) arg;
  readAvail->V();
}

static void WriteDoneHandler(void * arg) {
  (void) arg;
  writeDone->V();
}

SynchConsole::SynchConsole(const char * in, const char * out){
  readAvail = new Semaphore("read avail", 0);
  writeDone = new Semaphore("write done", 0);
  write     = new Semaphore("write", 1);
  sas       = new Semaphore("sas", 1);
  mutex     = new Lock("mutex");
  console   = new Console(in, out, ReadAvailHandler, WriteDoneHandler, 0);
  nblecteur = 0;
}

SynchConsole::~SynchConsole()
{
  delete console;
  delete writeDone;
  delete readAvail;
  delete mutex;
  delete sas;
  delete write;
}

void SynchConsole::SynchPutChar(int ch){
  sas->P();
  write->P();
  sas->V();

  console->PutChar(ch);
  writeDone->P();
  
  write->V();
}

int SynchConsole::SynchGetChar()
{
  sas->P(); mutex->Acquire();

  nblecteur++;
  if (nblecteur==1)
  {
    write->P();
  }
  mutex->Release(); 
  sas->V();


  readAvail->P();
  char c = console->GetChar();

  mutex->Acquire();

  nblecteur--;
  if (nblecteur==0)
  {
    write->V();
  }
  mutex->Release();

  return c;
}

void SynchConsole::SynchPutString(const char s[])
{
  sas->P();
  write->P();
  sas->V();
  int i = 0;
  while(s[i]!='\0' && s[i]!=-1){
    console->PutChar(s[i]);
    writeDone->P();
    //SynchPutChar(s[i]);
    i++;
  }
  write->V();
}

void SynchConsole::SynchGetString(char * s, int n){
  sas->P();
  mutex->Acquire();
  nblecteur++;
  if (nblecteur==1)
  {
    write->P();
  }
  mutex->Release(); 
  sas->V();

  int i=0;
  do{
    s[i]=SynchGetChar();
    i++;
  }while((s[i-1]!='\0')&&(i<n));
  s[i]='\0';

  mutex->Acquire();

  nblecteur--;
  if (nblecteur==0)
  {
    write->V();
  }
  mutex->Release();
}

#endif //CHANGED
