#include "syscall.h"
#include "userthread.h"
#include "thread.h"
#include "machine.h"
#include "system.h"


//pour avoir un nom unique par thread, on incrÃ©mente la variable.
int name ;
int * function;

int do_ThreadCreate (int f, int arg){
	DEBUG('x', "do_ThreadCreate\n");
	Thread * res = new Thread("test");
	name++;
	function =  (int*)malloc(2*sizeof(int));
	function[0] = f;
	function[1] = arg;
	res->Start(StartUserThread, function);

	if (false)
	{
		return -1;
	}

	return 0;
}


static void StartUserThread(void * _schmurtz){
	int *schmurtz = (int*) _schmurtz;
	// DEBUG('x', "mon debug %d\n", mavar);
	DEBUG('x', "StartUserThread with function : %p and argument %p\n", *(int*)schmurtz, *(int*)schmurtz+1);
	int i;
 	for (i = 0; i < NumTotalRegs; i++){
		machine->WriteRegister (i, 0);
	}
	machine->WriteRegister (PCReg, schmurtz[0]); 
	machine->WriteRegister (NextPCReg, machine->ReadRegister(PCReg) + 4);

    machine->WriteRegister(4, schmurtz[1]);
	DEBUG('x', "Register 4 : %d\n", machine->ReadRegister(4));

	machine->WriteRegister (StackReg, currentThread->space->AllocateUserStack());

    machine->Run();	
    
}

void do_ThreadExit(){
	free(function);
	currentThread->Finish();
	currentThread->RestoreUserState();
	currentThread->space->RestoreState();

}
